# Dynamic Programming (DP)

## Overview
DP is used to optimize recursive solutions by storing intermediate results. 
Itâ€™s suitable for problems with overlapping subproblems and optimal substructure.

## Common Patterns
- 1D DP (e.g., Fibonacci, Climbing Stairs)
- 2D DP (e.g., Knapsack, LCS)
- State transition thinking
- Bitmask DP

## Common Problems
- Longest Common Subsequence
- 0/1 Knapsack
- Coin Change
- Matrix Chain Multiplication
- House Robber

## Example Problem
Given an integer array, find the maximum sum of non-adjacent elements.